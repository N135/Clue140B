Clue-Solver:

How to use:

1). Set up the game with the setup predicate. The first three inputs are lists of the person cards, weapon cards, and room cards, respectively. The last two inputs set up the number of players, and where the user falls in that turn order.

setup([mustard, scarlet, plum, green, white, peacock], [rope, lead_pipe, knife, wrench, candlestick, pistol], [kitchen, ballroom, conservatory, dining_room, billiard_room, library, lounge, hall, study], 5, 2).

So in the above example, the game has been set up using the normal Clue cards, with 5 players in the game and with the user as the second player in the turn order.

2.) By now the user should have their cards in their hand. The user now passes these cards in via the setup_hand predicate. The three inputs are lists of people cards, weapon cards and room cards respectively.

hand([mustard, white], [rope], [study]).

The above example sets up the users hand with mustard, white, the rope, and the study.

3.) Now the order of play begins, starting with player 1 and moving around the board. This program doesn't track movements or positions; after all, the board changes between versions. It also doesn't check to make sure the turn order is being followed; this is because a player can end their turn without a suggestion, and suggestions are all this program cares about. 

On an opponent's turn, if something is suggested, use the other_suggestion predicate. This predicate takes 4 inputs. The first, second and third are the person, weapon and room cards being suggested, in that order. The last arguement is a list. It either takes one or two inputs. The first input is the suggesting player. The second is the player who responded to the request. If no one responds to the request, then the list only takes one input. 

other_suggestion(peacock, knife, library, [1,4]). 

The above example indicates that Player 1 suggested peacock, with the knife, in the library, and player 4 responded. 

other_suggestion(plum, wrench, ballroom, [1]). 

The above example indicates that Player 1 suggested plum, with the wrench, in the ballroom, and no player responded. 

On the the users turn, the user should first use the get_suggestion predicate. The input to this predicate is a list of rooms the user can move to. The output contains three things. First is whether or not the user should make an accusation. The second is the best suggestion out of all the rooms in the game. The third line is the best suggestion out of the rooms the user can move to.

get_suggestion([library,kitchen]).

No accusation to make at this time
Best Suggestion: plum, candlestick, ballroom
Best Local Suggestion: plum, candlestick, kitchen
true.

In the above example, the user can only move to the ballroom or the kitchen. The best move to make globally is to make the suggestion from the ballroom. However, given the rooms availible to the user, the best suggestion is from the kitchen. The user must decide whether it is worth giving up a suggestion to make the optimal suggestion. 


Once the user decides what to suggest, they must use the my_suggestion predicate. This predicate takes the person, weapon and room suggested, in that order as its first three inputs. The fourth input is a list of either length 0 or 2. The empty list is passed if no one has any of the cards suggested. The length 2 list is passed if a player has one of the cards, and the list consists of the player number and the card shown.

my_suggestion(plum, rope, study, []).

In the above example, the user suggested plum, with the rope, in the study, and no player responded. 

my_suggestion(white, pistol, kitchen, [5, pistol]).

In the above example, the user suggested white, with the pistol, in the kitchen, and player 5 showed the pistol in response. 

Finally, the user can use the notepad predicate to show what the program knows. X indicates a player doesn't have that card, O indcates they have that card and ? indicates that the state is unknown. The notepad also tells the user when to make an accusation. 

Notepad example, with a different setup:

notepad().

                    1  2  3  4  5  
mustard             x  x  o  x  x  
plum                ?  ?  x  ?  ?  
scarlet             ?  ?  x  ?  ?  
green               x  x  x  x  o  
gun                 x  x  o  x  x  
candlestick         ?  ?  x  ?  ?  
rope                ?  ?  x  ?  ?  
wrench              ?  ?  x  ?  ?  
ballroom            ?  ?  x  ?  ?  
kitchen             ?  ?  x  ?  ?  
study               x  x  o  x  x  
bedroom             ?  ?  x  x  ?  


No accusation to make at this time


The notepad can be brought up with the notepad predicate, taking no inputs, and the accusation state can be brought up with the make_accusation() predicate.

